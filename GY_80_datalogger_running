#include <Wire.h>
#include <SD.h>
#include <Adafruit_BMP085.h>
#include <L3G4200D.h>
#define Register_ID 0
#define Register_2D 0x2D
#define Register_X0 0x32
#define Register_X1 0x33
#define Register_Y0 0x34
#define Register_Y1 0x35
#define Register_Z0 0x36
#define Register_Z1 0x37


int ADXAddress = 0xA7 >> 1;  // the default 7-bit slave address
int reading = 0;
int val=0;
int X0,X1,X_out;
int Y0,Y1,Y_out;
int Z1,Z0,Z_out;
double Xg,Yg,Zg;

#define address 0x1E//I2C address of HMC5883
#define BMP085_ADDRESS 0x77  // I2C address of BMP085

int j=1;
uint8_t i = 0;

const int chipSelect = 4;
char afilename[] = "AccLOG00.csv";
char mfilename[] = "MagLOG00.csv";
char tfilename[] = "TemLOG00.csv";
char gfilename[] = "GyrLOG00.csv";

File afile;
File mfile;
File tfile;
File gfile;


Adafruit_BMP085 bmp;
L3G4200D gyro;

 


void setup()
{
  Wire.begin();                
  Serial.begin(9600);    
  delay(100);
  // enable to measute g data
  Wire.beginTransmission(ADXAddress);
  Wire.write(Register_2D);
  Wire.write(8);                //measuring enable
  Wire.endTransmission();     // stop transmitting
  

Serial.print("Initializing SD card...");
  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  pinMode(10, OUTPUT);
  
  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    // don't do anything more:
    return;
  }
  Serial.println("card initialized.");
  
  //char afilename[] = "LOGGER00.CSV";
  
  for (i = 0; i < 100; i++) {
    afilename[6] = i/10 + '0';
    afilename[7] = i%10 + '0';
    if (! SD.exists(afilename)) {
      // only open a new file if it doesn't exist
      afile = SD.open(afilename, FILE_WRITE);
      afile.println("X,Y,Z");
      afile.close();
      
       
      break;  // leave the loop!
    }
   
}
    mfilename[6] = i/10 + '0';
    mfilename[7] = i%10 + '0';
    
     tfilename[6] = i/10 + '0';
    tfilename[7] = i%10 + '0';
    
    gfilename[6] = i/10 + '0';
    gfilename[7] = i%10 + '0';
    
      mfile = SD.open(mfilename, FILE_WRITE);
      mfile.println("X,Y,Z");
      mfile.close();
      
      
      tfile = SD.open(tfilename, FILE_WRITE);
      tfile.println("Temp,Pressure,Altitude,Sea-Level Pressure");
      tfile.close();
      
      gfile = SD.open(gfilename, FILE_WRITE);
      gfile.println("X,Y,Z");
      gfile.close();
      
      
      
      gyro.enableDefault();
      
}

void loop()
{
  saveAccel();
  saveMagneto();
  saveTemp();
  saveGyro();
  
}

void saveAccel(){
  Wire.begin();
    Wire.beginTransmission(ADXAddress); // transmit to device
  Wire.write(Register_X0);
  Wire.write(Register_X1);
  Wire.endTransmission();
  Wire.requestFrom(ADXAddress,2); 
  if(Wire.available()<=2)   
  {
    X0 = Wire.read();
    X1 = Wire.read(); 
    X1=X1<<8;
    X_out=X0+X1;   
  }

  //------------------Y
  Wire.beginTransmission(ADXAddress); // transmit to device
  Wire.write(Register_Y0);
  Wire.write(Register_Y1);
  Wire.endTransmission();
  Wire.requestFrom(ADXAddress,2); 
  if(Wire.available()<=2)   
  {
    Y0 = Wire.read();
    Y1 = Wire.read(); 
    Y1=Y1<<8;
    Y_out=Y0+Y1;
  }
  //------------------Z
  Wire.beginTransmission(ADXAddress); // transmit to device
  Wire.write(Register_Z0);
  Wire.write(Register_Z1);
  Wire.endTransmission();
  Wire.requestFrom(ADXAddress,2); 
  if(Wire.available()<=2)   
  {
    Z0 = Wire.read();
    Z1 = Wire.read(); 
    Z1=Z1<<8;
    Z_out=Z0+Z1;
  }
  //
  Xg=X_out/256.0;
  Yg=Y_out/256.0;
  Zg=Z_out/256.0;
  Serial.print("X= ");
  Serial.print(Xg);
  Serial.print("       ");
  Serial.print("Y= ");
  Serial.print(Yg);
  Serial.print("       ");
  Serial.print("Z= ");
  Serial.print(Zg);
  Serial.println("  ");
  delay(200);
  //File dataFile = SD.open(afilename, FILE_WRITE);
  afile = SD.open(afilename, FILE_WRITE); 
    
  //afile.print(j);
  //afile.print(",");
      
  afile.print(Xg);
  afile.print(",");
 
  afile.print(Yg);
  afile.print(",");
  
  afile.print(Zg);
  afile.println("");
   afile.close();
  
  
}

void saveMagneto(){
  int x,y,z; //triple axis data

  //Tell the HMC5883 where to begin reading data
  Wire.beginTransmission(address);
  Wire.write(0x03); //select register 3, X MSB register
  Wire.endTransmission();
  
 
 //Read data from each axis, 2 registers per axis
  Wire.requestFrom(address, 6);
  if(6<=Wire.available()){
    x = Wire.read()<<8; //X msb
    x |= Wire.read(); //X lsb
    z = Wire.read()<<8; //Z msb
    z |= Wire.read(); //Z lsb
    y = Wire.read()<<8; //Y msb
    y |= Wire.read(); //Y lsb
  }
  mfile = SD.open(mfilename, FILE_WRITE);
  //Print out values of each axis
  mfile.print(x);
  mfile.print(",");
  mfile.print(y);
  mfile.print(",");
  mfile.println(z);
  mfile.close();
  
}
void saveTemp(){
   bmp.begin();
    tfile = SD.open(tfilename, FILE_WRITE);
   tfile.print(bmp.readTemperature());
   
   tfile.print(",");
   
   tfile.print(bmp.readPressure());
    tfile.print(",");
    
    tfile.print(bmp.readAltitude());
    tfile.print(",");
    
    tfile.println(bmp.readSealevelPressure());
    tfile.close();
  
}

void saveGyro(){

gyro.read();
gfile = SD.open(gfilename, FILE_WRITE);

  gfile.print((int)gyro.g.x);
  gfile.print(",");
  gfile.print((int)gyro.g.y);
  gfile.print(" Z: ");
  gfile.println((int)gyro.g.z);
  gfile.close();

}
